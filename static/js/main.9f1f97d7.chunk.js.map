{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","value","onChange","change","placeholder","Result","_props$weather","weather","error","time","city","temp","sunrise","sunset","pressure","wind","content","sunriseTime","Date","toLocaleDateString","sunsetTime","className","concat","App","state","date","handleInputChange","event","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","toLocaleString","sys","main","speed","catch","console","log","components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f1f97d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => {\r\n    return (\r\n        /*<form onSubmit={props.submit}>*/\r\n        <form>\r\n            <input type='text' value={props.value} onChange={props.change}placeholder=\"Wpisz miasto\" />\r\n            {/*<button type='submit'>Wyślij</button>*/}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;   ","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = (props) => {\r\n\r\n    const {error, time, city, temp, sunrise, sunset, pressure, wind} = props.weather\r\n\r\n    let content = null;\r\n\r\n    if (!error && city) {\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleDateString()\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleDateString()\r\n        content = (\r\n            <div>\r\n            <h4>Wyniki wyszukiwania dla <em>{city}</em></h4>\r\n            <h5>Data i godzina: ${time}</h5>\r\n            <h5>Aktualna temperatura ${temp}</h5>\r\n            <h5>Wschód o ${sunriseTime}</h5>\r\n            <h5>Zachód o ${sunsetTime}</h5>\r\n            <h5>Siła wiatru ${wind}</h5>\r\n            <h5>Ciśnienie ${pressure}</h5>\r\n            </div>\r\n        )\r\n    }\r\n    return ( \r\n        <div className='result'>\r\n            {error ? `Nie mamy takiego chujowego miasta jak ${city}` : content }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Result;\r\n","import React, { Component } from 'react';\nimport Form from './Form'\nimport Result from './Result'\nimport './App.css';\nconst APIKey = 'ea942e815ce96d501d0aeed2bf7e1a66'\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    date: '',\n    city: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    error: false,\n\n  }\n\n\n\n  handleInputChange = (event) => {\n    this.setState({\n      value: event.target.value\n    })\n  }\n\n/*\n  handleCitySubmit = (event) => {\n    event.preventDefault()\n    console.log('Potwierdzony formularz')\n    const API = fetch(`//api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`);\n\n\n    fetch(API)\n    .then(response => {\n      if(response.ok){\n        return response \n      }\n        throw Error('Nie udało się')\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString()\n        this.setState({\n          error: false,\n          date: time,\n          city: this.state.value,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n\n        })\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n          error: true,\n          city: this.state.value\n        })\n      \n      })\n\n  }\n*/\n\n  componentDidUpdate(prevProps, prevState){\n    if (this.state.value.length === 0) return\n    if (this.state.value.length === 1) return\n    if (this.state.value.length === 2) return\n    if (this.state.value.length === 3) return\n    if (prevState.value !== this.state.value){\n      const API = fetch(`//api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`);\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error('Nie udało się')\n        })\n        .then(response => response.json())\n        .then(data => {\n          const time = new Date().toLocaleString()\n          this.setState({\n            error: false,\n            date: time,\n            city: this.state.value,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n\n          })\n        })\n        .catch(error => {\n          console.log(error);\n          this.setState({\n            error: true,\n            city: this.state.value\n          })\n\n        })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      Aplikacja pogodowa\n      <Form value={this.state.value} change={this.handleInputChange} /*submit={this.handleCitySubmit}*//>\n      <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}